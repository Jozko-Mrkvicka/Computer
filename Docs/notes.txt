#############################################
#                   Notes
#############################################
─ ━ │ ┃ ┄ ┅ ┆ ┇ ┈ ┉ ┊ ┋ ┌ ┍ ┎ ┏
┐ ┑ ┒ ┓ └ ┕ ┖ ┗ ┘ ┙ ┚ ┛ ├ ┝ ┞ ┟
┠ ┡ ┢ ┣ ┤ ┥ ┦ ┧ ┨ ┩ ┪ ┫ ┬ ┭ ┮ ┯
┰ ┱ ┲ ┳ ┴ ┵ ┶ ┷ ┸ ┹ ┺ ┻ ┼ ┽ ┾ ┿
╀ ╁ ╂ ╃ ╄ ╅ ╆ ╇ ╈ ╉ ╊ ╋ ╌ ╍ ╎ ╏
═ ║ ╒ ╓ ╔ ╕ ╖ ╗ ╘ ╙ ╚ ╛ ╜ ╝ ╞ ╟
╠ ╡ ╢ ╣ ╤ ╥ ╦ ╧ ╨ ╩ ╪ ╫ ╬ 
╔═══════╤══════╦════════╤═══════╗
║       │      ║        │       ║
╟───────┼──────╫────────┼───────╢
║       │      ║        │       ║
╠═══════╪══════╬════════╪═══════╣
║       │      ║        │       ║
║       │      ║        │       ║
║       │      ║        │       
╚═══════╧══════╩════════╧═══════╝

░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀ 


OOOOOO|DD D|SSS|IIII IIIIIIII IIII

#############################################
#              Mrkvicka 9000
#############################################
- Dokumentacia
    - Dokoncit README.
    - Vylestit instrukcie.

    - Mrkvicka 9000 Programmer`s Manual
        - PDF
        - Readme
        - Instructions
        - Demo examples

    - Mrkvicka 9000 Hardware Manual
        - PDF
        - Simulink model


- Hardware:
    - Rozsirit klavesnicu na 128 znakov ASCII (aby sa dala kreslit textova grafika).
    - Pridat klavesnicovy buffer.
    - Pridat na klavesnicu tlacitko SHIFT.
    - Dokoncit obrazovku/terminal.

    - Pridat instrukciu JGT (jump if greater than) kvoli instrukcii CMPI (nie je mozne pouzit instrukciu JLT vo vsetkych pripadoch - operandy sa nedaju prehodit).

    - Pridat timer + prerusenie.

    - Ochrana pamati / error detection:
        - Indikovat chybu ak je viacero kontrolnych signalov do MUXu aktivnych. Vystup poslat na FrontPanel.
        - Detekovat stack overflow/underflow.

    - Zjednodusit architekturu:
        - Nahradit vsetky typy enkoderov pomocou jedneho 16_to_4.
        - Zistit ci by pomohlo keby som nahradil vsetky multiplexory iba pomocou jedneho typu.


- GUI
    - FrontPanel
        - Pridat tlacitka RESET, RUN, STOP, STEP.
    - Pridat Instruction Memory Panel.
    - Pridat Terminal (obrazovka, klavesnica).


- Preprocessor:
    - Zarovnat pravy okraj vygenerovaneho kodu.


- Testy


- Firmware:
    - memcpy()
    - Tetris
    - Snake
    - Hodiny
    - Kalkulacka
    - Textovy editor

    - Faktorial -> Budem musiet ukladat na zasobnik aj navratovu adresu (Return Address Register). Zatial este nemam ziaden return value register pomocou ktoreho by funkcia vracala navratovu hodnotu. Automaticky ukladat return value register.

    - Funkciu ktora dostane argumenty adresa pola a dlzka pola, a vrati sucet prvkov v poli (vytvorit demonstracnu funkciu ktora by dostala parametre z hlavneho programu a vratila by hodnotu. Ide tu o to ze este stale uplne nechapem pracu s funkciami/parametrami). Pridat .data segment/.text segment -> Chyba mi mechanizmus na ukladanie datovych poli do zdrojoveho kodu. Ako nahardcodovat pole cisel do ROM, aby sa neinterpretovali ako instrukcie?? Myslim ze sa na to pouziva sekcia ".data". 


- Ostatne
    - Presunut common library do samostatneho repozitara a pridat .gitsubmodule(s).
    - Skontrolovat v celom projekte ci sa niekde nenachadza string "TODO".


#############################################
#              Mrkvicka 9001
#############################################
- Hardware:
    - von Neumannova architektura
        - Budem moct vytvarat a spustat programy rovno na pocitaci.
        - Programy sa budu dat ukladat/nahravat do/z magnetickej pasky.

    - Pouzit iba jeden register (accumulator).
        - Usetrim bity v instrukcii.
        - Moznost zvacsit adresovy priestor alebo pridat viac immediate instrukcii.
        - Mensi pocet suciastok.

    - Rozsirit ALU
        - Nasobicka, delicka (zaberie niekolko hodinovych cyklov).
        - Prerobit instrukciu SHIFT pomocou posuvnych registrov (zaberie niekolko hodinovych cyklov).
    - Pridat dva specialne 32-bitove registre na aritmeticke operacie.
    - Pridat FPU.

    - UART/USART

- Naprogramovat Assembler.
