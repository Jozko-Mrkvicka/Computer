#############################################
#                   Notes
#############################################
─ ━ │ ┃ ┄ ┅ ┆ ┇ ┈ ┉ ┊ ┋ ┌ ┍ ┎ ┏
┐ ┑ ┒ ┓ └ ┕ ┖ ┗ ┘ ┙ ┚ ┛ ├ ┝ ┞ ┟
┠ ┡ ┢ ┣ ┤ ┥ ┦ ┧ ┨ ┩ ┪ ┫ ┬ ┭ ┮ ┯
┰ ┱ ┲ ┳ ┴ ┵ ┶ ┷ ┸ ┹ ┺ ┻ ┼ ┽ ┾ ┿
╀ ╁ ╂ ╃ ╄ ╅ ╆ ╇ ╈ ╉ ╊ ╋ ╌ ╍ ╎ ╏
═ ║ ╒ ╓ ╔ ╕ ╖ ╗ ╘ ╙ ╚ ╛ ╜ ╝ ╞ ╟
╠ ╡ ╢ ╣ ╤ ╥ ╦ ╧ ╨ ╩ ╪ ╫ ╬ 
╔═══════╤══════╦════════╤═══════╗
║       │      ║        │       ║
╟───────┼──────╫────────┼───────╢
║       │      ║        │       ║
╠═══════╪══════╬════════╪═══════╣
║       │      ║        │       ║
║       │      ║        │       ║
║       │      ║        │       
╚═══════╧══════╩════════╧═══════╝

░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀ 


OOOOOO|DD D|SSS|IIII IIIIIIII IIII


#############################################
#              Mrkvicka 9000
#############################################
- Ostatne
    - Presunut common library do samostatneho repozitara.
        - Updatovat countre.
        - Updatovat Misc.
        - Memory blocks.
    - Skontrolovat v celom projekte ci sa niekde nenachadza string "TODO".
    - Vsetky subsystemy vlozit do dvoch vrstiev
        - Gate layer
        - System layer.
    - ??Zlucit vsetky riadiace signaly do jednej control unit??


- Hardware:
    - Pridat instrukciu JGT (jump if greater than) kvoli instrukcii CMPI (nie je mozne pouzit instrukciu JLT vo vsetkych pripadoch - operandy sa nedaju prehodit).

    - Zjednodusit architekturu:
        - Skontrolovat decodery. Idealne prerobit na jeden alebo dva typy.
        - RAM pamate a registre ktore pouzivaju vystupny multiplexor sa daju prerobit pomocou "action" subsystemov. Potom sa namiesto vysupneho muxu pouzije blok "Merge". Predtym vsak treba zistit ako bude vyzerat fyzicka realizacia tranzistorovych pamati (zistit ci je tam nejaky rozdiel oproti ferritovym/diodovym pamatiam).
        - Prerobit GP registers:
            - Pridat jeden accumulator register. Bude sluzit ako destination register.
            - Tym mozem odstranit jeden Mux_8.
            - Zvysne registre sa budu pouzivat ako source registre. Na vystupe budu zmergovane, preto budem moct odstranit druhy Mux_8.
            - Takisto usetrim 3 bity v instrukcnych formatoch ktore pouzivaju destination register.
            - Tiez sa asi zbavim jedneho dekodera ktory vybera destination registre.

    - Pridat timer + prerusenie.

    - Ochrana pamati / error detection:
        - Indikovat chybu ak je viacero kontrolnych signalov do MUXu aktivnych. Vystup poslat na FrontPanel.
        - Stack overflow/underflow.
        - Unknown instruction/operand.

    - Postavit celociselnu nasobicku/delicku (ako kombinacny obvod):
        - Nahradit instrukciu SHIFT pomocou celociselneho nasobenia/delenia.
        - Pridat dva specialne 32-bitove registre na aritmeticke operacie.

    - Prerusenia
        - Klavesnica
        - Timer
        - UART

    - Pridat Video subsystem
        - Presunut charTable.
        - Prerobit charTable na diodovu ROM.
        - Nasimulovat countre ktore budu citat z VRAM a posielat data do analogovej casti videa.

    - Ferritova RAM
        - Pridat logiku ktora precitany byte do nej hned nanovo zapise.

    - Pridat UART/USART
        - Prepojit ho s Windows terminalom.


- GUI
    - FrontPanel
        - Pridat tlacitka RESET, RUN, STOP, STEP.
    - Pridat Instruction Memory Panel.
    - Pridat Terminal (obrazovka, klavesnica).
    - HALUSKA 9000 (Heuristically programmed ALgorithmic Universal SKAtula 9000) 


- Preprocessor:
    - Zarovnat pravy okraj vygenerovaneho kodu.


- Firmware:
    - memcpy()
    - Tetris
    - Snake
    - Hodiny
    - Kalkulacka
    - Textovy editor

    - Faktorial -> Budem musiet ukladat na zasobnik aj navratovu adresu (Return Address Register). Zatial este nemam ziaden return value register pomocou ktoreho by funkcia vracala navratovu hodnotu. Automaticky ukladat return value register.

    - Funkciu ktora dostane argumenty adresa pola a dlzka pola, a vrati sucet prvkov v poli (vytvorit demonstracnu funkciu ktora by dostala parametre z hlavneho programu a vratila by hodnotu. Ide tu o to ze este stale uplne nechapem pracu s funkciami/parametrami). Pridat .data segment/.text segment -> Chyba mi mechanizmus na ukladanie datovych poli do zdrojoveho kodu. Ako nahardcodovat pole cisel do ROM, aby sa neinterpretovali ako instrukcie?? Myslim ze sa na to pouziva sekcia ".data". 


- Dokumentacia
    - Dokoncit README.
    - Vylestit instrukcie.

    - Mrkvicka 9000 Programmer`s Manual
        - PDF
        - Readme
        - Instructions
        - Demo examples

    - Mrkvicka 9000 Hardware Manual
        - PDF
        - Simulink model


- Testy


- Commit Message:
    - Fixed bugs in instructions STUI, LDLI and LDUI.
    - Fixed bug in DataRAM addressing.
    - Fixed bug in Preprocessor.


#############################################
#              Mrkvicka 9001
#############################################
- Hardware:
    - von Neumannova architektura
        - Budem moct vytvarat a spustat programy rovno na pocitaci.
        - Programy sa budu dat ukladat/nahravat do/z magnetickej pasky.

    - Pouzit iba jeden register (accumulator).
        - Usetrim bity v instrukcii.
        - Moznost zvacsit adresovy priestor alebo pridat viac immediate instrukcii.
        - Mensi pocet suciastok.

    - Pridat FPU.

    - Prerobit architekturu na 1-bit. Usetrim hradla v multiplexeroch.


- Compilator:
    - Naprogramovat Assembler.
    - Naprogramovat BASIC alebo pseudoC

