#############################################
#                   Notes
#############################################
─ ━ │ ┃ ┄ ┅ ┆ ┇ ┈ ┉ ┊ ┋ ┌ ┍ ┎ ┏
┐ ┑ ┒ ┓ └ ┕ ┖ ┗ ┘ ┙ ┚ ┛ ├ ┝ ┞ ┟
┠ ┡ ┢ ┣ ┤ ┥ ┦ ┧ ┨ ┩ ┪ ┫ ┬ ┭ ┮ ┯
┰ ┱ ┲ ┳ ┴ ┵ ┶ ┷ ┸ ┹ ┺ ┻ ┼ ┽ ┾ ┿
╀ ╁ ╂ ╃ ╄ ╅ ╆ ╇ ╈ ╉ ╊ ╋ ╌ ╍ ╎ ╏
═ ║ ╒ ╓ ╔ ╕ ╖ ╗ ╘ ╙ ╚ ╛ ╜ ╝ ╞ ╟
╠ ╡ ╢ ╣ ╤ ╥ ╦ ╧ ╨ ╩ ╪ ╫ ╬ 
╔═══════╤══════╦════════╤═══════╗
║       │      ║        │       ║
╟───────┼──────╫────────┼───────╢
║       │      ║        │       ║
╠═══════╪══════╬════════╪═══════╣
║       │      ║        │       ║
║       │      ║        │       ║
║       │      ║        │       
╚═══════╧══════╩════════╧═══════╝

░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀ 


OOOOOO|DD D|SSS|IIII IIIIIIII IIII


%     % Store full path of the input file.
%     path_and_name = which(filename);

%     % Convert it to string.
%     path_and_name = string(path_and_name);

%     % Replace extension ".m" to ".mat".
%     path_and_name = strrep(path_and_name, ".m", ".mat");

%     save(path_and_name, "CompiledCode");


#############################################
#              Mrkvicka 9000
#############################################
- Ostatne
    - Presunut common library do samostatneho repozitara.
        - Updatovat countre.

- Hardware:
    - Prerusenia
        - Klavesnica
        - Ku PC pridat interrupt vector table (ako samostatnu ROM).
        - Aktivne prerusenie sa bude spravat podobne ako instrukcia CALL:
            - Prerusenie sa zalatchuje do interrupt registra.
            - Prerusenie zablokuje vsetky instrukcie (CPU on halt).
            - Aktualna adresa sa ulozi na stack.
            - Do PC sa privedie adresa IRQ handlera z vector table.
            - PC skoci do IRQ handlera.
                - To ze sa PC nachadza v IRQ handleri bude zapisane v JK latchi.
                - Ked je JK latch nastaveny v jednotke, tak disabluje vsetky interrupty (IRQ handler je neprerusitelny).
                - Pri opusteni IRQ handlera (ked sa z neho zavola instrukcia RET) sa JK latch vynuluje.
                - Instrukcia RET sa vrati do hlavneho programu a interrupty su opat aktivne.

    - Ferritova RAM
        - Preprogramovat RAM tak aby hned po precitani zmazala precitane data. Tym sa bude simulovat ferritova pamat.
        - Pridat logiku ktora precitany byte do nej hned nanovo zapise.

    - Pridat Video subsystem
        - Presunut charTable.
        - Prerobit charTable na diodovu ROM.
        - Nasimulovat countre ktore budu citat z VRAM a posielat data do analogovej casti videa.
        - Spojit Matlab s Windows terminalom a pouzit ho ako obrazovku.
        - Screen_Column_Counter <0..39>
        - Screen_Row_Counter <0..24>
        - Character_Column_Counter <0..7>
        - Character_Row_Counter <0..7>
        - Najprv vyberiem z VRAM ord_num znaku. Ord_num pouzijem ako adresu do char_table. Zo znaku (bitmap 8x8) precitaneho z char_table precitam cely riadok na ktory bude ukazovat Character_Row_Counter. Vybrany riadok poslem cez shift register do analogovej casti videosystemu.


- Testy
    - Pridat test citania/zapisu z/do pamati, IROM, DROM, DRAM, VRAM - otestovat okraje (prerobit uz existujuce testy).
    - Prerobit vnutro pamati na obycajne enkodery + enkoder presunut do common library.

    
- GUI
    - FrontPanel
        - Pridat tlacitka RESET, RUN, STOP, STEP.
        - Error detection:
            - Indikovat chybu ak je viacero kontrolnych signalov do MUXu aktivnych. Vystup poslat na FrontPanel.
            - Indikovat chybu ak je viacero vystupnych signalov z dekodera aktivnych. Vystup poslat na FrontPanel.
            - Stack overflow/underflow detection.
            - Unknown instruction/operand.
            - Kazdy kombinacny (Mux, Enc, Dec) aj sequencny obvod (registre, countre) by mohol mat na front panely vyvedenu svoju vystupnu hodnotu.
            - Built In Test - ku vsetkym subsystemom (s detekciou chyby) priviest false-positive test signal na overenie detekcie chyb.

    - Pridat Instruction Memory Panel.
    - Pridat Terminal (obrazovka, klavesnica).
    - HALUSKA 9000 (Heuristically programmed ALgorithmic Universal SKAtula 9000) 
        - Powered by Jozko Mrkvicka


- Preprocessor:
    - Zarovnat pravy okraj vygenerovaneho kodu.
    - Fixnut TODOs.
    - Naprogramovat linker, aby som mohol buildit kod z viacerych suborov dokopy (aby som mohol na koniec ROMky ulozit kniznicu standartnych funkcii).


- Firmware:
    - memcpy()
    - Tetris
    - Snake
    - Hodiny
    - Kalkulacka
    - Textovy editor

    - Faktorial -> Budem musiet ukladat na zasobnik aj navratovu adresu (Return Address Register). Zatial este nemam ziaden return value register pomocou ktoreho by funkcia vracala navratovu hodnotu. Automaticky ukladat return value register.

    - Funkciu ktora dostane argumenty adresa pola a dlzka pola, a vrati sucet prvkov v poli (vytvorit demonstracnu funkciu ktora by dostala parametre z hlavneho programu a vratila by hodnotu. Ide tu o to ze este stale uplne nechapem pracu s funkciami/parametrami). Pridat .data segment/.text segment -> Chyba mi mechanizmus na ukladanie datovych poli do zdrojoveho kodu. Ako nahardcodovat pole cisel do ROM, aby sa neinterpretovali ako instrukcie?? Myslim ze sa na to pouziva sekcia ".data". 


- Dokumentacia
    - ??Zlucit vsetky riadiace signaly do jednej control unit??
    - Vsetky subsystemy vlozit do dvoch vrstiev
        - Gate layer
        - System layer.

    - Dokoncit README.
    - Vylestit instrukcie.

    - Mrkvicka 9000 Programmer`s Manual
        - PDF
        - Readme
        - Instructions
        - Demo examples

    - Mrkvicka 9000 Hardware Manual
        - PDF
        - Simulink model


- Commit Message:


#############################################
#              Mrkvicka 9001
#############################################
- Hardware:
    - von Neumannova architektura
        - Budem moct vytvarat a spustat programy rovno na pocitaci.
        - Programy sa budu dat ukladat/nahravat do/z magnetickej pasky.

    - Prerobit registre:
        - Pridat jeden accumulator register. Bude sluzit ako destination register.
        - Usetrim 3 bity v instrukcnych formatoch ktore pouzivaju destination register.
        - Asi sa zbavim jedneho dekodera ktory vybera destination registre.
        - Budem musiet pridat jednu instrukciu na citanie alebo zapis do/z accumulatora.

    - Prerobit Muxy tak aby namiesto hradiel NAND pouzivali iba po jednom tranzistore zapojenom ako switch.

    - Pridat FPU.

    - Prerobit architekturu na 1-bit. Usetrim hradla v multiplexeroch.

    - Postavit celociselnu nasobicku/delicku
        - Ako samostatne zariadenie pripojene na datovu zbernicu.
        - Ako sequencny obvod.
        - Pracovat s CPU bude asynchronne, komunikacia pomocou prerusena.
        - Bud postavit samostatnu nasobicku a potom nepotrebujem instrukciu SHIFT, alebo nasobit softwarovo (bitshift + scitanie) a potom mi staci SHIFT iba o jeden bit.

    - Pridat 16-bit timer:
        - Set threshold.
        - Set start count.
        - Free run
        - One shot
        - Start
        - ??Stop??

    - Pridat UART/USART
        - Prepojit ho s Windows terminalom.

    - Prerusenia
        - Timer
        - UART
        - Nasobicka


- Compilator:
    - Naprogramovat Assembler.
    - Naprogramovat BASIC alebo pseudoC

