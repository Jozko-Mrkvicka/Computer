#############################################
#                   Notes
#############################################
Online objednavky:
    - "stackthrough connector", "stackthrough tails"
    - ferrite cores:
        - 1 plane:                                             32 x 32 x 1b
        - 8 planes per bundle:                             8 x 32 x 32 x 1b
        - if low density (10mm between cores) then
            - 2 bundles per cabinet:                   2 x 8 x 32 x 32 x 1b
            - 6 to 8 cabinets per rack:            8 x 2 x 8 x 32 x 32 x 1b = 131,072 cores (16KB)
        - if high density (5mm between cores) then
            - 8 bundles per cabinet:                   8 x 8 x 32 x 32 x 1b
            - 6 to 8 cabinets per rack:            8 x 8 x 8 x 32 x 32 x 1b = 524,288 cores (64KB)


2 ul * countHorizontal * distanceHorizontalBit + distanceHorizontalBetweenBytes + distanceHorizontalBetweenWords


- Decoder_5_to_32 ma cca 230 tranzistorov ~~> 256


─ ━ │ ┃ ┄ ┅ ┆ ┇ ┈ ┉ ┊ ┋ ┌ ┍ ┎ ┏
┐ ┑ ┒ ┓ └ ┕ ┖ ┗ ┘ ┙ ┚ ┛ ├ ┝ ┞ ┟
┠ ┡ ┢ ┣ ┤ ┥ ┦ ┧ ┨ ┩ ┪ ┫ ┬ ┭ ┮ ┯
┰ ┱ ┲ ┳ ┴ ┵ ┶ ┷ ┸ ┹ ┺ ┻ ┼ ┽ ┾ ┿
╀ ╁ ╂ ╃ ╄ ╅ ╆ ╇ ╈ ╉ ╊ ╋ ╌ ╍ ╎ ╏
═ ║ ╒ ╓ ╔ ╕ ╖ ╗ ╘ ╙ ╚ ╛ ╜ ╝ ╞ ╟
╠ ╡ ╢ ╣ ╤ ╥ ╦ ╧ ╨ ╩ ╪ ╫ ╬ 
╔═══════╤══════╦════════╤═══════╗
║       │      ║        │       ║
╟───────┼──────╫────────┼───────╢
║       │      ║        │       ║
╠═══════╪══════╬════════╪═══════╣
║       │      ║        │       ║
║       │      ║        │       ║
║       │      ║        │       
╚═══════╧══════╩════════╧═══════╝

░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀ 


OOOOOO|DD D|SSS|IIII IIIIIIII IIII


%     % Store full path of the input file.
%     path_and_name = which(filename);

%     % Convert it to string.
%     path_and_name = string(path_and_name);

%     % Replace extension ".m" to ".mat".
%     path_and_name = strrep(path_and_name, ".m", ".mat");

%     save(path_and_name, "CompiledCode");


#############################################
#              HALUŠKA 9000
#############################################
- Hardware:
    - Prerobit immediate value selection v instruction decoderi. Pozri poznamku v modeli.
    - FrontPanel
        - Vyviest vystupnu hodnotu z kazdeho kombinacneho (Mux, Enc, Dec) aj sequencneho obvodu (registre, countre) na front panel (do workspacu).
        - Pridat tlacitka RESET, RUN, STOP, STEP.
        - Error detection:
            - Indikovat chybu ak je viacero kontrolnych signalov do MUXu aktivnych. Vystup poslat na FrontPanel.
            - Indikovat chybu ak je viacero vystupnych signalov z dekodera aktivnych. Vystup poslat na FrontPanel.
            - Stack overflow/underflow detection.
            - Unknown instruction/operand.
            - Kazdy kombinacny (Mux, Enc, Dec) aj sequencny obvod (registre, countre) by mohol mat na front panely vyvedenu svoju vystupnu hodnotu.
            - Built In Test - ku vsetkym subsystemom (s detekciou chyby) priviest false-positive test signal na overenie detekcie chyb.
            - Vyviest error hodnotu z kazdeho MUXu na front panel.
    - Seriovy port:
        - Memory mapped register shift register (Serial_Port_Out).
        - Nahram do neho 1B (parallelne) a on ho automaticky odosle (seriovo, po bitoch).
        - Pridat generovanie start a stop bitov (register bude mat sirku 10 bitov).
        - Nakonfigurovat parametre: baudrate, ...
        - Seriovy port bude pracovat asynchronne na CPU, bude mat vlastny clock.
        - Clock counter na maximalnej baudrate frequencii, bude sa delit pri nizsich baudratoch.
        - Serial_Port_Interrupt pri prijati noveho bajtu.
        - Input port bude 3x (alebo az 5x) sirsi a kazdy prichadzajuci bit sa bude vzorkovat viackrat. Potom sa vypocita spravna hodnota.
        - Ako detekovat ze prichadzaju data???
            - Prijimac je v idle stave (high) a na nakonfigurovanom bitrate vzorkuje Rx vstup. 
            - Vyhodnocuje 5 po sebe iducich vzorkov (1 1 1 1 1) a ked je detekovany start bit (prud vzorkov sa zmeni: 1 1 1 1 1 -> 1 1 1 1 0 -> 1 1 1 0 0 -> 1 1 0 0 0 -> 1 0 0 0 0 -> 0 0 0 0 0) tak zacne prijimane bity zapisovat do input bufferu.
        - Pridat radic serioveho port
            - Serial_Config_Reg
            - Serial_Port_Out
            - Serial_Port_In
        - Spojit sa s RealTermom
        - Vysielanie (Tx).
        - Vymysliet latchovanie interruptu.
        - Vymysliet bufferovanie inputov. 
        - Napisat dokumentaciu.
        - Zistit ako sa da riadit poloha kurzora na obrazovke terminalu. Ako sa to robilo "naozaj"? 
        - Zistit ako presne sa latchuju interrupty a dopisat ku nim poznamku ze "kazdy interrupt sa zalatchuje okamzite po tom ako vznikol" a nasledne sa sucasne zalatchovane interrupty postupne obsluzia v zavislosti na ich prioritach".
        - Nastudovat ATmegu.
        - Pridat vystupny buffer (8 Bytov), ak su v buffri data (hocico ine okrem 0x00), tak aktivovat interrupt. 
        - Buffer bude namapovany na adresovu zbernicu (posledny byte), citat sa z neho bude stylom "ak interrupt tak citaj until 0". 
        - Ako funguje DMA? Nedalo by sa to pouzit spolu so seriovym portom?

    - Pridat Video subsystem
        - each character to be underlined, brightened, blinking or inverse
        - pouzit jeden riadok bitmapy ako atribut array a nikdy ho nevykreslovat na obrazovku.
        - Presunut charTable.
        - Prerobit charTable na diodovu ROM.
        - Video Controller:
            - register - nova suradnica X
            - register - nova suradnica Y
            - register - aktualna pozicia kurzora x
            - register - aktualna pozicia kurzora y
            - register - data in
            - register - data out
            - register - control
                - read/write on XY bit
                - write on next position bit
            - vsetky registre budu mat input (output) buffer
            - status flag - input buffer full / alebo interrupty??

    - Pridat FPU.
    - Postavit celociselnu nasobicku/delicku
        - Ako samostatne zariadenie pripojene na datovu zbernicu.
        - Ako sequencny obvod.
        - Pracovat s CPU bude asynchronne, komunikacia pomocou prerusena.
        - Bud postavit samostatnu nasobicku a potom nepotrebujem instrukciu SHIFT, alebo nasobit softwarovo (bitshift + scitanie) a potom mi staci SHIFT iba o jeden bit.


- Preprocessor:
    - Zarovnat pravy okraj vygenerovaneho kodu.
    - Naprogramovat linker, aby som mohol buildit kod z viacerych suborov dokopy (aby som mohol na koniec ROMky ulozit kniznicu standartnych funkcii).
    - Pridat oznacenie instrukcie ktora sa prave vykonava (debug mode):
        - Ulozit cely vypis z print_output_values to pola.
        - Zvyraznit dany riadok.
        - Pole pri kazdom kroku prekreslit.
    - Fixnut TODOs.


- GUI
    - FrontPanel
        - Pridat tlacitka RESET, RUN, STOP, STEP.
        - Error detection:
            - Indikovat chybu ak je viacero kontrolnych signalov do MUXu aktivnych. Vystup poslat na FrontPanel.
            - Indikovat chybu ak je viacero vystupnych signalov z dekodera aktivnych. Vystup poslat na FrontPanel.
            - Stack overflow/underflow detection.
            - Unknown instruction/operand.
            - Kazdy kombinacny (Mux, Enc, Dec) aj sequencny obvod (registre, countre) by mohol mat na front panely vyvedenu svoju vystupnu hodnotu.
            - Built In Test - ku vsetkym subsystemom (s detekciou chyby) priviest false-positive test signal na overenie detekcie chyb.
    - Pridat Instruction Memory Panel.
    - Pridat Terminal (obrazovka, klavesnica).
    - HALUŠKA 9000 (Heuristically programmed ALgorithmic Universal ŠKAtuľa model 9000) 
        - Powered by Jožko Mrkvička / jožko mrkvička inside


- Firmware:
    - memcpy()
    - Tetris
    - Snake
    - Hodiny
    - Kalkulacka
    - Textovy editor
    - Interpret prikazov / zavadzac programov / kommandlajna

    - Faktorial -> Budem musiet ukladat na zasobnik aj navratovu adresu (Return Address Register). Zatial este nemam ziaden return value register pomocou ktoreho by funkcia vracala navratovu hodnotu. Automaticky ukladat return value register.

    - Funkciu ktora dostane argumenty adresa pola a dlzka pola, a vrati sucet prvkov v poli (vytvorit demonstracnu funkciu ktora by dostala parametre z hlavneho programu a vratila by hodnotu. Ide tu o to ze este stale uplne nechapem pracu s funkciami/parametrami). Pridat .data segment/.text segment -> Chyba mi mechanizmus na ukladanie datovych poli do zdrojoveho kodu. Ako nahardcodovat pole cisel do ROM, aby sa neinterpretovali ako instrukcie?? Myslim ze sa na to pouziva sekcia ".data". 


- Dokumentacia
    - Update README.
    - Vylestit instrukcie.
    - Zjednotit font v poznamkach.
    - Fixnut TODOs.
    - Zjednotit velkosti vsetkych MUXov.
    - Zjednotit velkosti vsetkych systemov.
    - Kombinacne obvody nafarbit na dajaku peknu farbu.

    - Haluska 9000 User`s Manual
        - Introduction
            - People`s Democratic Republic of East Slovakistan, Jozko Mrkvicka vs. Janko Haluska
            - "9000 Series makes no mistakes"
            - "A Fistful of Bits", "For a Few Bits More"
        - Hardware
            - Logical Design (Simulink model)
            - Electrical Design
            - Mechanical Design
        - Software
            - Assembler (or Instructions)
            - Standard Library
                - memcpy()
            - Demo Examples
                - Text Editor
                - Calculator
                - Tetris
                - Snake
        - Credentials:
            - fotka celej miestnosti / zaber na obrazovku spoza chrbta / "Fatal Error" -> hlava na stole
            - "People often ask me why do I create such useless bullshits. If I can`t do something more useful? The truth is that I have nothing better to do in my life. I just haven`t figured out if it is good or bad..."


- Commit Message:


#############################################
#              HALUŠKA 9001
#############################################
- Hardware:
    - von Neumannova architektura
        - Budem moct vytvarat a spustat programy rovno na pocitaci.
        - Programy sa budu dat ukladat/nahravat do/z magnetickej pasky.

    - Prerobit registre:
        - Pridat jeden accumulator register. Bude sluzit ako destination register.
        - Usetrim 3 bity v instrukcnych formatoch ktore pouzivaju destination register.
        - Asi sa zbavim jedneho dekodera ktory vybera destination registre.
        - Budem musiet pridat jednu instrukciu na citanie alebo zapis do/z accumulatora.

    - "blikaciu" schemu s registrami na hlavnom paneli? tak ako v elektrarni?
    - Priamo nastavovat registre z hlavneho panelu (kvoli debuggingu).
    - Hardwarove breakpointy(??) Nastavil by som adresu na ktorej sa ma prave vykonavany program zastavit.
    - Ochrana pamate (??)

    - Prerobit architekturu na 1-bit / alebo aspon na 1 byte. Usetrim hradla v multiplexeroch.

    - Prerobit Stack, revertnut zmeny (vratit Stack Pointer). Mal by byt menej hradiel ako ma teraz.

    - Prerobit Muxy tak aby namiesto hradiel NAND pouzivali iba po jednom tranzistore zapojenom ako switch.

    - Ferritova RAM (na prvy krat sa mi to nepodarilo :-()
        - Preprogramovat RAM tak aby hned po precitani zmazala precitane data. Tym sa bude simulovat ferritova pamat.
        - Pridat logiku ktora precitany byte do nej hned nanovo zapise.
        - Pouzit defaultnu RAM zo simulinkovskej kniznice. Ma vyhodu oproti mojej implementacii, ze sa da v jednom clock cyclu precitat aj zapisat tou istou hodnotou (obsahuje delay). Moja implementacia sa sprava ako kombinacny obvod, musim tam mat extra delay ktory dalej sposobuje problemy.

    - Periferie:
        - Magneticka paska / harddisk ako externa pamat.
        - Citacka diernych stitkov (diernej pasky??).
        - Dierovacka stitkov/pasky.


- Compilator:
    - Naprogramovat Assembler.
    - Naprogramovat BASIC alebo pseudoC

  
- Dokumentacia
    - Vsetky subsystemy vlozit do dvoch vrstiev
        - Gate layer
        - System layer.
    - Update README.

