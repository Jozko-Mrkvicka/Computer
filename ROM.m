clc
% Load symbolic constants (instructions)
Instructions
% Video_Adapter
% CharTable

% 0.) FF|OO|IIII   IIIIIIII
%
% 1.) FF|OO|DDD|S  SS|IIIIII
%
% 2.) FF|OOO|DDD   IIIIIIII
%
% 3.) FF|OOOO|RR   RR|DDD|SSS

% Constant definition
c.FORMAT_0_OPERAND_MASK = bin2dec('0000 1111');
c.FORMAT_1_OPERAND_1_MASK = bin2dec('0000 1110');
c.FORMAT_1_OPERAND_2_MASK = bin2dec('0000 0001');
c.FORMAT_1_OPERAND_3_MASK = bin2dec('0011 1111');
c.FORMAT_2_OPERAND_MASK   = bin2dec('0000 0111');
c.FORMAT_3_OPERAND_1_MASK = bin2dec('0011 1000');
c.FORMAT_3_OPERAND_2_MASK = bin2dec('0000 0111');

c.FORMAT_0_OPCODE_MASK = bin2dec('0011 0000');
c.FORMAT_1_OPCODE_MASK = bin2dec('0011 0000');
c.FORMAT_2_OPCODE_MASK = bin2dec('0011 1000');
c.FORMAT_3_OPCODE_MASK = bin2dec('0011 1100');

c.INSTR_FORMAT_MASK = bin2dec('1100 0000');

c.INSTR_FORMAT_0 = bin2dec('0000 0000');
c.INSTR_FORMAT_1 = bin2dec('0100 0000');
c.INSTR_FORMAT_2 = bin2dec('1000 0000');
c.INSTR_FORMAT_3 = bin2dec('1100 0000');

% Destination label (for example "LOOP_") represents absolute memory address.
c.LABEL_DEST_PREFIX = bin2dec('11111110 00000000');
c.LABEL_SRC_PREFIX  = bin2dec('11111101 00000000');
c.LABEL_PREFIX_MASK = bin2dec('11111111 00000000');
c.LABEL_MASK = bin2dec('00000000 11111111'); % LABEL_INDEX_MASK

c.BYTE_MASK = bin2dec('1111 1111');



idx = 1;
LOOP_  = bitor(c.LABEL_DEST_PREFIX, idx);
LOOP   = bitor(c.LABEL_SRC_PREFIX,  idx);

idx = idx + 1;
LBL1_  = bitor(c.LABEL_DEST_PREFIX, idx);
LBL1   = bitor(c.LABEL_SRC_PREFIX,  idx);

idx = idx + 1;
LEFT_  = bitor(c.LABEL_DEST_PREFIX, idx);
LEFT   = bitor(c.LABEL_SRC_PREFIX,  idx);

idx = idx + 1;
RIGHT_ = bitor(c.LABEL_DEST_PREFIX, idx);
RIGHT  = bitor(c.LABEL_SRC_PREFIX,  idx);

idx = idx + 1;
UP_    = bitor(c.LABEL_DEST_PREFIX, idx);
UP     = bitor(c.LABEL_SRC_PREFIX,  idx);

idx = idx + 1;
DOWN_  = bitor(c.LABEL_DEST_PREFIX, idx);
DOWN   = bitor(c.LABEL_SRC_PREFIX,  idx);

idx = idx + 1;
EXIT_  = bitor(c.LABEL_DEST_PREFIX, idx);
EXIT   = bitor(c.LABEL_SRC_PREFIX,  idx);

idx = idx + 1;
FNC_READ_KEY_ = bitor(c.LABEL_DEST_PREFIX, idx);
FNC_READ_KEY  = bitor(c.LABEL_SRC_PREFIX,  idx);

idx = idx + 1;
FNC_ERASE_SCR_ = bitor(c.LABEL_DEST_PREFIX, idx);
FNC_ERASE_SCR  = bitor(c.LABEL_SRC_PREFIX,  idx);

idx = idx + 1;
PROC2_ = bitor(c.LABEL_DEST_PREFIX, idx);
PROC2  = bitor(c.LABEL_SRC_PREFIX,  idx);

idx = idx + 1;
PROC3_ = bitor(c.LABEL_DEST_PREFIX, idx);
PROC3  = bitor(c.LABEL_SRC_PREFIX,  idx);

idx = idx + 1;
PROC4_ = bitor(c.LABEL_DEST_PREFIX, idx);
PROC4  = bitor(c.LABEL_SRC_PREFIX,  idx);

idx = idx + 1;
UPROW_ = bitor(c.LABEL_DEST_PREFIX, idx);
UPROW  = bitor(c.LABEL_SRC_PREFIX,  idx);

idx = idx + 1;
UPCOL_ = bitor(c.LABEL_DEST_PREFIX, idx);
UPCOL  = bitor(c.LABEL_SRC_PREFIX,  idx);

idx = idx + 1;
DNROW_ = bitor(c.LABEL_DEST_PREFIX, idx);
DNROW  = bitor(c.LABEL_SRC_PREFIX,  idx);

idx = idx + 1;
DNCOL_ = bitor(c.LABEL_DEST_PREFIX, idx);
DNCOL  = bitor(c.LABEL_SRC_PREFIX,  idx);

idx = idx + 1;
CONTINUE_ = bitor(c.LABEL_DEST_PREFIX, idx);
CONTINUE  = bitor(c.LABEL_SRC_PREFIX,  idx);

idx = idx + 1;
INIT_LOOP_ = bitor(c.LABEL_DEST_PREFIX, idx);
INIT_LOOP  = bitor(c.LABEL_SRC_PREFIX,  idx);

idx = idx + 1;
FNC_INIT_SNAKE_ = bitor(c.LABEL_DEST_PREFIX, idx);
FNC_INIT_SNAKE  = bitor(c.LABEL_SRC_PREFIX,  idx);

idx = idx + 1;
FNC_DRAW_SNAKE_ = bitor(c.LABEL_DEST_PREFIX, idx);
FNC_DRAW_SNAKE  = bitor(c.LABEL_SRC_PREFIX,  idx);

idx = idx + 1;
DRAW_LOOP_ = bitor(c.LABEL_DEST_PREFIX, idx);
DRAW_LOOP  = bitor(c.LABEL_SRC_PREFIX,  idx);

idx = idx + 1;
FCN_MOVE_SNAKE_ = bitor(c.LABEL_DEST_PREFIX, idx);
FCN_MOVE_SNAKE  = bitor(c.LABEL_SRC_PREFIX,  idx);


c.LBL_CNT = idx;


RomCode = ...
[
				MRC		r7		230					... % Global value - pointer to tail of snake (in RAM).
				CALL	FNC_INIT_SNAKE				...
				CALL	FNC_DRAW_SNAKE				...
				CALL	FNC_READ_KEY				...
													...
FNC_READ_KEY_	PUSH	r0							...
				PUSH	r1							...
				PUSH	r3							...
				MRC		r0		8					... % X-position
				MRC		r1		12					... % Y-position
LOOP_			GCH		r3							... % Read keyboard input
				SPX1	r0		r1					...
				CMPI	r3		2					...
				JPE		DOWN						... % Button 8 was pressed
				CMPI	r3		4					...
				JPE		LEFT						... % Button 4 was pressed
				CMPI	r3		5					...
				JNE		CONTINUE					... % Button 2 was pressed 
				CALL	FNC_ERASE_SCR				...
CONTINUE_		CMPI	r3		6					...
				JPE		RIGHT						... % Button 6 was pressed
				CMPI	r3		8					...
				JPE		UP							... % Button 8 was pressed
				JMP		LOOP						...
LEFT_			SPX0	r0		r1					...
				ADDI	r0		255					... % r0 = r0 - 1
				JMP		LOOP						...
RIGHT_			SPX0	r0		r1					...
				ADDI	r0		1					...
				JMP		LOOP						...
UP_				SPX0	r0		r1					...
				ADDI	r1		255					... % r1 = r1 - 1
				JMP		LOOP						...
DOWN_			SPX0	r0		r1					...
				ADDI	r1		1					...
				JMP		LOOP						...
				POP		r3							...
				POP		r1							...
				POP		r0							...
				RET									...
													...
FNC_DRAW_SNAKE_	PUSH	r0							...
				PUSH	r1							...
				PUSH	r2							...
				MRC		r0		224					... % Pointer to head of snake (in RAM).
DRAW_LOOP_		MRM		r1		r0					... % load snake.x
				ADDI	r0		1					...
				MRM		r2		r0					... % load snake.y
				ADDI	r0		1					...
				SPX1	r1		r2					...
				CMP		r0		r7					...
				JNE		DRAW_LOOP					... % Loop until whole snake is drawn.
				POP		r2							...
				POP		r1							... 
				POP		r0							...
				RET									...
													...
FNC_ERASE_SCR_	PUSH	r0							... % X-position
				PUSH	r1							... % Y-position
				MRC		r1		24					...
UPCOL_			ADDI	r1		255					... % r1 = r1 - 1
				MRC		r0		MIN_X				...
UPROW_			SPX1	r0		r1					...
				ADDI	r0		1					...
				CMPI	r0		16					...
				JNE		UPROW						...
				CMPI	r1		MIN_Y				...
				JNE		UPCOL						...
				MRC		r1		0					...
DNCOL_			MRC		r0		MIN_X				...
DNROW_			SPX0	r0		r1					...
				ADDI	r0		1					...
				CMPI	r0		16					...
				JNE		DNROW						...
				ADDI	r1		1					...
				CMPI	r1		24					...
				JNE		DNCOL						...
				POP		r1							...
				POP		r0							...
				RET									...
													...
FNC_INIT_SNAKE_	PUSH	r0							... % Initialization of snake. 
				PUSH	r1							...
				PUSH	r2							...
				MRC		r2		5					... % snake.x - initial position of snake`s head
				MRC		r1		5					... % snake.y - initial position of snake`s head
				MRC		r0		224					... % pointer to head of snake (in RAM)
INIT_LOOP_		MMR		r0		r1					... % Save snake.y to RAM.
				ADDI	r0		1					...
				MMR		r0		r2					... % Save snake.x to RAM.
				ADDI	r0		1					...
				ADDI	r1		1					... % snake.y = snake.y + 1;
				CMP		r0		r7					...
				JNE		INIT_LOOP					... % Loop until whole snake is initialized.
				POP		r2							...
				POP		r1							...
				POP		r0							...
				RET									...
													...
FCN_MOVE_SNAKE_	ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
];
RomCode = Preprocessor(RomCode, c);

