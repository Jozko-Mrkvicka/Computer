clc
% Load symbolic constants (instructions)
Instructions
% Addresses
% Video_Adapter
% CharTable

% Constant definition
c.FORMAT_1_OPCODE_MASK = bin2dec('0011 0000');
c.FORMAT_2_OPCODE_MASK = bin2dec('0011 1000');
c.FORMAT_3_OPCODE_MASK = bin2dec('0011 1100');

c.INSTR_FORMAT_MASK = bin2dec('1100 0000');

c.INSTR_FORMAT_0 = bin2dec('0000 0000');
c.INSTR_FORMAT_1 = bin2dec('0100 0000');
c.INSTR_FORMAT_2 = bin2dec('1000 0000');
c.INSTR_FORMAT_3 = bin2dec('1100 0000');

c.LABEL_DEST_PREFIX = bin2dec('11111111 10000000');
c.LABEL_SRC_PREFIX  = bin2dec('11111111 01000000');
c.LABEL_PREFIX_MASK = bin2dec('11111111 11000000');
c.LABEL_MASK = bin2dec('00000000 00111111'); % LABEL_INDEX_MASK

c.BYTE_MASK = bin2dec('1111 1111');


% Demo: When button "6" is pressed then cursor (pixel) moves to the right.
% Destination label (for example "LOOP_") represents absolute memory address.
LABEL_DEST_PREFIX = hex2dec('FF80');
LABEL_SRC_PREFIX =  hex2dec('FF40');

idx = 1;
LOOP_  = bitor(LABEL_DEST_PREFIX, idx);
LOOP   = bitor(LABEL_SRC_PREFIX,  idx);

idx = idx + 1;
LBL1_  = bitor(LABEL_DEST_PREFIX, idx);
LBL1   = bitor(LABEL_SRC_PREFIX,  idx);

idx = idx + 1;
LEFT_  = bitor(LABEL_DEST_PREFIX, idx);
LEFT   = bitor(LABEL_SRC_PREFIX,  idx);

idx = idx + 1;
RIGHT_ = bitor(LABEL_DEST_PREFIX, idx);
RIGHT  = bitor(LABEL_SRC_PREFIX,  idx);

idx = idx + 1;
UP_    = bitor(LABEL_DEST_PREFIX, idx);
UP     = bitor(LABEL_SRC_PREFIX,  idx);

idx = idx + 1;
DOWN_  = bitor(LABEL_DEST_PREFIX, idx);
DOWN   = bitor(LABEL_SRC_PREFIX,  idx);

idx = idx + 1;
EXIT_  = bitor(LABEL_DEST_PREFIX, idx);
EXIT   = bitor(LABEL_SRC_PREFIX,  idx);

idx = idx + 1;
START_ = bitor(LABEL_DEST_PREFIX, idx);
START  = bitor(LABEL_SRC_PREFIX,  idx);

idx = idx + 1;
FNC_ERASE_SCR_ = bitor(LABEL_DEST_PREFIX, idx);
FNC_ERASE_SCR  = bitor(LABEL_SRC_PREFIX,  idx);

idx = idx + 1;
PROC2_ = bitor(LABEL_DEST_PREFIX, idx);
PROC2  = bitor(LABEL_SRC_PREFIX,  idx);

idx = idx + 1;
PROC3_ = bitor(LABEL_DEST_PREFIX, idx);
PROC3  = bitor(LABEL_SRC_PREFIX,  idx);

idx = idx + 1;
PROC4_ = bitor(LABEL_DEST_PREFIX, idx);
PROC4  = bitor(LABEL_SRC_PREFIX,  idx);

idx = idx + 1;
UPROW_ = bitor(LABEL_DEST_PREFIX, idx);
UPROW  = bitor(LABEL_SRC_PREFIX,  idx);

idx = idx + 1;
UPCOL_ = bitor(LABEL_DEST_PREFIX, idx);
UPCOL  = bitor(LABEL_SRC_PREFIX,  idx);

idx = idx + 1;
DNROW_ = bitor(LABEL_DEST_PREFIX, idx);
DNROW  = bitor(LABEL_SRC_PREFIX,  idx);

idx = idx + 1;
DNCOL_ = bitor(LABEL_DEST_PREFIX, idx);
DNCOL  = bitor(LABEL_SRC_PREFIX,  idx);

idx = idx + 1;
CONTINUE_ = bitor(LABEL_DEST_PREFIX, idx);
CONTINUE  = bitor(LABEL_SRC_PREFIX,  idx);

idx = idx + 1;
INIT_LOOP_ = bitor(LABEL_DEST_PREFIX, idx);
INIT_LOOP  = bitor(LABEL_SRC_PREFIX,  idx);

idx = idx + 1;
FNC_INIT_SNAKE_ = bitor(LABEL_DEST_PREFIX, idx);
FNC_INIT_SNAKE  = bitor(LABEL_SRC_PREFIX,  idx);

idx = idx + 1;
FNC_DRAW_SNAKE_ = bitor(LABEL_DEST_PREFIX, idx);
FNC_DRAW_SNAKE  = bitor(LABEL_SRC_PREFIX,  idx);

idx = idx + 1;
DRAW_LOOP_ = bitor(LABEL_DEST_PREFIX, idx);
DRAW_LOOP  = bitor(LABEL_SRC_PREFIX,  idx);

idx = idx + 1;
FCN_MOVE_SNAKE_ = bitor(LABEL_DEST_PREFIX, idx);
FCN_MOVE_SNAKE  = bitor(LABEL_SRC_PREFIX,  idx);


c.LBL_CNT = idx;


RomCode = ...
[
				MRC		r7		230					... % Global value - pointer to tail of snake (in RAM).
				CALL	FNC_INIT_SNAKE				...
				CALL	FNC_DRAW_SNAKE				...
				JMP		START						...
				ADDI	r0		0					...
													...
FCN_MOVE_SNAKE_	ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
				ADDI	r0		0					...
													...
START_			MRC		r0		8					... % X-position
				MRC		r1		12					... % Y-position
				MRC		r2		2					... % Buttons definition
				MRC		r4		4					...
				MRC		r5		5					...
				MRC		r6		6					...
				MRC		r7		8					...
LOOP_			GCH		r3		r3					... % Read keyboard input
				SPX		r0		r1		ON			...
				JPE		r3		r2		DOWN		... % Button 8 was pressed
				JPE		r3		r4		LEFT		... % Button 4 was pressed
				JNE		r3		r5		CONTINUE	... % Button 2 was pressed 
				CALL	FNC_ERASE_SCR				...
CONTINUE_		JPE		r3		r6		RIGHT		... % Button 6 was pressed
				JPE		r3		r7		UP			... % Button 8 was pressed
				JPE		r0		r0		LOOP		...
LEFT_			SPX		r0		r1		OFF			...
				ADDI	r0		255					... % r0 = r0 - 1
				JPE		r0		r0		LOOP		...
RIGHT_			SPX		r0		r1		OFF			...
				ADDI	r0		1					...
				JPE		r0		r0		LOOP		...
UP_				SPX		r0		r1		OFF			...
				ADDI	r1		255					... % r1 = r1 - 1
				JPE		r0		r0		LOOP		...
DOWN_			SPX		r0		r1		OFF			...
				ADDI	r1		1					...
				JPE		r0		r0		LOOP		...
													...
FNC_INIT_SNAKE_	PUSH	r0		r0					... % Initialization of snake. 
				PUSH	r0		r1					...
				PUSH	r0		r2					...
				MRC		r2		5					... % snake.x - initial position of snake`s head
				MRC		r1		5					... % snake.y - initial position of snake`s head
				MRC		r0		224					... % pointer to head of snake (in RAM)
INIT_LOOP_		MMR		r0		r1					... % Save snake.y to RAM.
				ADDI	r0		1					...
				MMR		r0		r2					... % Save snake.x to RAM.
				ADDI	r0		1					...
				ADDI	r1		1					... % snake.y = snake.y + 1;
				JNE		r0		r7		INIT_LOOP	... % Loop until whole snake is initialized.
				POP		r2		r0					...
				POP		r1		r0					...
				POP		r0		r0					...
				RET		r0		r0					...
													...
FNC_DRAW_SNAKE_	PUSH	r0		r0					...
				PUSH	r0		r1					...
				PUSH	r0		r2					...
				MRC		r0		224					... % Pointer to head of snake (in RAM).
DRAW_LOOP_		MRM		r1		r0					... % load snake.x
				ADDI	r0		1					...
				MRM		r2		r0					... % load snake.y
				ADDI	r0		1					...
				SPX		r1		r2		ON			...
				JNE		r0		r7		DRAW_LOOP	... % Loop until whole snake is drawn.
				POP		r2		r0					...
				POP		r1		r0					... 
				POP		r0		r0					...
				RET		r0		r0					...
													...
FNC_ERASE_SCR_	PUSH	r0		r0					... % X-position
				PUSH	r0		r1					... % Y-position
				PUSH	r0		r2					... % MAX-X position
				PUSH	r0		r3					... %
				MRC		r1		24					...
				MRC		r2		16					...
				MRC		r3		MIN_Y				...
UPCOL_			ADDI	r1		255					... % r1 = r1 - 1
				MRC		r0		MIN_X				...
UPROW_			SPX		r0		r1		ON			...
				ADDI	r0		1					...
				JNE		r0		r2		UPROW		...
				JNE		r1		r3  	UPCOL		...
				MRC		r1		0					...
				MRC		r3		24					...
DNCOL_			MRC		r0		MIN_X				...
DNROW_			SPX		r0		r1		OFF			...
				ADDI	r0		1					...
				JNE		r0		r2  	DNROW		...
				ADDI	r1		1					...
				JNE		r1		r3  	DNCOL		...
				POP		r3		r0					...
				POP		r2		r0					...
				POP		r1		r0					...
				POP		r0		r0					...
				RET		r0		r0					...
];
transpose(RomCode);



RomCode = Preprocessor(RomCode, c);
% transpose(RomCode)

program_len = size(RomCode, 2);

fprintf('+---------------------------------------------------------------+\n');
fprintf('|                    Assembler Preprocessor                     |\n');
fprintf('+------------+-------------------------------+------------------+\n');
fprintf('|  ADDRESS   |          INSTRUCTION          |       CODE       |\n');
fprintf('+------------+-------------------------------+------------------+\n');

% c.INSTR_FORMAT_MASK = bin2dec('1100 0000');

% c.INSTR_FORMAT_0 = bin2dec('0000 0000');
% c.INSTR_FORMAT_1 = bin2dec('0100 0000');
% c.INSTR_FORMAT_2 = bin2dec('1000 0000');
% c.INSTR_FORMAT_3 = bin2dec('1100 0000');

% c.FORMAT_1_OPCODE_MASK = bin2dec('0011 0000');
% c.FORMAT_2_OPCODE_MASK = bin2dec('0011 1000');
% c.FORMAT_3_OPCODE_MASK = bin2dec('0011 1100');

% Format 1: FF|OO|DDD|S SS|IIIIII
% Format 3: FF|OOOO|RR RR|DDD|SSS

c.FORMAT_1_OPERAND_1_MASK = bin2dec('0000 1110');
c.FORMAT_1_OPERAND_2_MASK = bin2dec('0000 0001');
c.FORMAT_1_OPERAND_3_MASK = bin2dec('0011 1111');
c.FORMAT_2_OPERAND_MASK   = bin2dec('0000 0111');
c.FORMAT_3_OPERAND_1_MASK = bin2dec('0011 1000');
c.FORMAT_3_OPERAND_2_MASK = bin2dec('0000 0111');


for (i = 1:2:program_len)
	fprintf('|    %03d:    |', i - 1);

	switch (bitand(RomCode(i), c.INSTR_FORMAT_MASK))
		case c.INSTR_FORMAT_0

		case c.INSTR_FORMAT_1
			switch (bitor(bitand(RomCode(i), c.FORMAT_1_OPCODE_MASK), c.INSTR_FORMAT_1))
				case SPX
					fprintf('   SPX     r%d    r%d   %3d   ', bitshift(bitand(RomCode(i), c.FORMAT_1_OPERAND_1_MASK), -1),  ...
							                            bitor(bitshift(bitand(RomCode(i), c.FORMAT_1_OPERAND_2_MASK), 2), bitshift(RomCode(i + 1), -6)),  ...
							                            bitand(RomCode(i + 1), c.FORMAT_1_OPERAND_3_MASK))
				case JNE
					fprintf('   JNE     r%d    r%d   %3d   ', bitshift(bitand(RomCode(i), c.FORMAT_1_OPERAND_1_MASK), -1),  ...
							                            bitor(bitshift(bitand(RomCode(i), c.FORMAT_1_OPERAND_2_MASK), 2), bitshift(RomCode(i + 1), -6)),  ...
							                            bitand(RomCode(i + 1), c.FORMAT_1_OPERAND_3_MASK))
				case JPE
					fprintf('   JPE     r%d    r%d   %3d   ', bitshift(bitand(RomCode(i), c.FORMAT_1_OPERAND_1_MASK), -1),  ...
							                            bitor(bitshift(bitand(RomCode(i), c.FORMAT_1_OPERAND_2_MASK), 2), bitshift(RomCode(i + 1), -6)),  ...
							                            bitand(RomCode(i + 1), c.FORMAT_1_OPERAND_3_MASK))
			end

		case c.INSTR_FORMAT_2
			switch (bitor(bitand(RomCode(i), c.FORMAT_2_OPCODE_MASK), c.INSTR_FORMAT_2))
				case CALL
					fprintf('   CALL   %3d               ', RomCode(i + 1))
				case JMP
					fprintf('   JMP    %3d               ', RomCode(i + 1))
				case ADDI
					fprintf('   ADDI    r%d   %3d         ', bitand(RomCode(i), c.FORMAT_2_OPERAND_MASK), RomCode(i + 1))
				case TIR
					fprintf('   TIR     r%d   %3d         ', bitand(RomCode(i), c.FORMAT_2_OPERAND_MASK), RomCode(i + 1))
				case MMRI
					fprintf('   MMRI    r%d   %3d         ', bitand(RomCode(i), c.FORMAT_2_OPERAND_MASK), RomCode(i + 1))
				case MRMI
					fprintf('   MRMI    r%d   %3d         ', bitand(RomCode(i), c.FORMAT_2_OPERAND_MASK), RomCode(i + 1))
				case MRC
					fprintf('   MRC     r%d   %3d         ', bitand(RomCode(i), c.FORMAT_2_OPERAND_MASK), RomCode(i + 1))
			end

		case c.INSTR_FORMAT_3
			switch (bitor(bitand(RomCode(i), c.FORMAT_3_OPCODE_MASK), c.INSTR_FORMAT_3))
				case PUSH
					fprintf('   PUSH    r%d               ', bitand(RomCode(i + 1), c.FORMAT_3_OPERAND_2_MASK))
				case RET
					fprintf('   RET                      ')
				case POP
					fprintf('   POP     r%d               ', bitshift(bitand(RomCode(i + 1), c.FORMAT_3_OPERAND_1_MASK), -3))
				case GCH
					fprintf('   GCH     r%d    r%d         ', bitshift(bitand(RomCode(i + 1), c.FORMAT_3_OPERAND_1_MASK), -3), bitand(RomCode(i + 1), c.FORMAT_3_OPERAND_2_MASK))
				case ADD
					fprintf('   ADD     r%d    r%d        ', bitshift(bitand(RomCode(i + 1), c.FORMAT_3_OPERAND_1_MASK), -3), bitand(RomCode(i + 1), c.FORMAT_3_OPERAND_2_MASK))
				case GPX
					fprintf('   GPX     r%d    r%d        ', bitshift(bitand(RomCode(i + 1), c.FORMAT_3_OPERAND_1_MASK), -3), bitand(RomCode(i + 1), c.FORMAT_3_OPERAND_2_MASK))
				case TRR
					fprintf('   TRR     r%d    r%d        ', bitshift(bitand(RomCode(i + 1), c.FORMAT_3_OPERAND_1_MASK), -3), bitand(RomCode(i + 1), c.FORMAT_3_OPERAND_2_MASK))
				case TMR
					fprintf('   TMR     r%d    r%d        ', bitshift(bitand(RomCode(i + 1), c.FORMAT_3_OPERAND_1_MASK), -3), bitand(RomCode(i + 1), c.FORMAT_3_OPERAND_2_MASK))
				case MMR
					fprintf('   MMR     r%d    r%d         ', bitshift(bitand(RomCode(i + 1), c.FORMAT_3_OPERAND_1_MASK), -3), bitand(RomCode(i + 1), c.FORMAT_3_OPERAND_2_MASK))
				case MRM
					fprintf('   MRM     r%d    r%d         ', bitshift(bitand(RomCode(i + 1), c.FORMAT_3_OPERAND_1_MASK), -3), bitand(RomCode(i + 1), c.FORMAT_3_OPERAND_2_MASK))
				case MRR
					fprintf('   MRR     r%d    r%d        ', bitshift(bitand(RomCode(i + 1), c.FORMAT_3_OPERAND_1_MASK), -3), bitand(RomCode(i + 1), c.FORMAT_3_OPERAND_2_MASK))
			end
	end

    fprintf('   |    %3d   %3d     |\n', RomCode(i), RomCode(i + 1))
end

fprintf('+------------+-------------------------------+------------------+\n');

% RomCode(1), 

% % Demo: When button "6" is pressed then cursor (pixel) moves to the right.
% LABEL_DEST_PREFIX = hex2dec('FF80');
% LABEL_SRC_PREFIX =  hex2dec('FF40');

% LOOP_  = bitor(LABEL_DEST_PREFIX, 1);
% LOOP   = bitor(LABEL_SRC_PREFIX,  1);

% % BACK_  = bitor(LABEL_DEST_PREFIX, 2);
% % BACK   = bitor(LABEL_SRC_PREFIX,  2);

% LEFT_  = bitor(LABEL_DEST_PREFIX, 3);
% LEFT   = bitor(LABEL_SRC_PREFIX,  3);

% RIGHT_ = bitor(LABEL_DEST_PREFIX, 4);
% RIGHT  = bitor(LABEL_SRC_PREFIX,  4);

% UP_    = bitor(LABEL_DEST_PREFIX, 5);
% UP     = bitor(LABEL_SRC_PREFIX,  5);

% DOWN_  = bitor(LABEL_DEST_PREFIX, 6);
% DOWN   = bitor(LABEL_SRC_PREFIX,  6);

% EXIT_  = bitor(LABEL_DEST_PREFIX, 7);
% EXIT   = bitor(LABEL_SRC_PREFIX,  7);

% RomCode = ...
% [
% 		MRC		r0		8				... % X-position
% 		MRC		r1		12				... % Y-position
% 										...
% 		MRC		r2		2				... % Buttons definition
% 		MRC		r4		4				...
% 		MRC		r5		5				...
% 		MRC		r6		6				...
% 		MRC		r7		8				...
% 										...
% LOOP_	GCH		r3		r3				... % Read keyboard input
% 		SPX		r0		r1		ON		...
% 		JPE		r3		r2		DOWN	... % Button 8 was pressed ...
% 		JPE		r3		r4		LEFT	... % Button 4 was pressed ...
% 		JPE		r3		r5		EXIT	... % Button 2 was pressed ...
% 		JPE		r3		r6		RIGHT	... % Button 6 was pressed ...
% 		JPE		r3		r7		UP		... % Button 8 was pressed ...
% 		JPE		r0		r0		LOOP	... 
% 										...
% LEFT_	SPX		r0		r1		OFF		...
% 		SUBI	r0		1				...
% 		JPE		r0		r0		LOOP	...
% 										...
% RIGHT_	SPX		r0		r1		OFF		...
% 		ADDI	r0		1				...
% 		JPE		r0		r0		LOOP	...
% 										...
% UP_		SPX		r0		r1		OFF		...
% 		SUBI	r1		1				...
% 		JPE		r0		r0		LOOP	...
% 										...
% DOWN_	SPX		r0		r1		OFF		...
% 		ADDI	r1		1				...
% 		JPE		r0		r0		LOOP	...
% 										...
% EXIT_	ADDI	r0		0				...
% 		ADDI	r0		0				...
% 		ADDI	r0		0				...
% 		ADDI	r0		0				...
% 		ADDI	r1		0				...
% 										...
% 		ADDI	r1		0				...
% 		ADDI	r1		0				...
% 		ADDI	r1		0				...
% 		ADDI	r1		0				...
% 		ADDI	r1		0				...
% 		ADDI	r1		0				...
% 		ADDI	r1		0				...
% 		ADDI	r1		0				...
% 										...
% 		ADDI	r1		0				...
% 		ADDI	r1		0				...
% 		ADDI	r1		0				...
% 		ADDI	r1		0				...
% 		ADDI	r1		0				...
% 		ADDI	r1		0				...
% 		ADDI	r1		0				...
% 		ADDI	r1		0				...
% 										...
% 		ADDI	r1		0				...
% 		ADDI	r1		0				...
% 		ADDI	r1		0				...
% 		ADDI	r1		0				...
% 		ADDI	r1		0				...
% 		ADDI	r1		0				...
% 		ADDI	r1		0				...
% 		ADDI	r1		0				...
% 										...
% 		ADDI	r1		0				...
% 		ADDI	r1		0				...
% 		ADDI	r1		0				...
% 		ADDI	r1		0				...
% 		ADDI	r1		0				...
% 		ADDI	r1		0				...
% 		ADDI	r1		0				...
% 		ADDI	r1		0				...
% ]

