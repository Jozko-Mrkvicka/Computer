====================
General requirements
====================
- Constant and variable identifiers must be unique. (DONE)
- Labels can be declared only once. (!!!)
- All comments are deleted from source code. (DONE)
- Source code contains the following sections:
	- .CONST (optional) (DONE)
	- .DATA (optional) (DONE)
	- .TEXT (mandatory) (DONE)
- Section must not be empty. (DONE)
- The following checks are done in source code:
	- Valid datatypes. (DONE)
	- Valid registers. (DONE)
	- Valid instructions. (DONE)
	- Valid identifiers. (DONE)
	- Valid binary/decimal/hexadecimal constants. (DONE)
	- Valid string constants. (DONE)
	- Valid labels. (DONE)


==============================
Requirements for an identifier
==============================
- It must not be a keyword (register, instruction or datatype). (DONE)
- It must not begin with a digit. (DONE)
- It can contain only alphanumerical characters and the underscore character. (DONE)
- If it is an array then it contains:
	- A length value encapsulated in a pair of square brackets. (DONE)
	- A length value can be:
		- Binary number (suffixed with "b"). (DONE)
		- Hexadecimal number (prefixed with "0x"). (DONE)
		- Decimal number. (DONE)
	- A length value must be greater than zero. (DONE)


=====================================
Requirements for a numerical constant
=====================================
- Decimal number can begin with a sign character. (DONE)
- Hexadecimal number must not have a sign character. (DONE)
- Binary number must not have a sign character. (DONE)


==================================
Requirements for a string constant
==================================
- Encaptulated in double quotes. (DONE)
- A valid string can contain only characters which are available in the character table in ROM. (DONE)
- The NULL character is automatically added at the end of a string (in the .CONST section). (DONE)


==============================
Requirements for a valid label
==============================
- It must not be a keyword (register, instruction or datatype). (DONE)
- It must not begin with a digit. (DONE)
- It can contain only alphanumerical characters and the underscore character. (DONE)
- It must end with the colon character. (DONE)


===============================
Requirements for datatype range
===============================
- A value of UINT8  type is in range <0      ..    255>. (DONE)
- A value of INT8   type is in range <-128   ..   +127>. (DONE)
- A value of UINT16 type is in range <0      ..  65535>. (DONE)
- A value of INT16  type is in range <-32768 .. +32767>. (DONE)


==============================
Requirements for .DATA section
==============================
- Every line must contain exactly two words in the following order: datatype, identifier. (DONE)
- Sum of all variables must fit into the RAM (sum <= RAM_SIZE - STACK_SIZE). (DONE)
- A variable is stored in a list of structures with the following members:
	- Name (DONE)
	- Datatype (DONE)
	- Length (DONE)
	- Address (DONE)


===============================
Requirements for .CONST section
===============================
- Every line must contain at least three words in the following order: datatype, identifier, value. (DONE)
- Sum of all constants must fit into the constant data ROM. (DONE)
- A constant is stored in a list of structures with the following members:
	- Name (DONE)
	- Datatype (DONE)
	- Length (DONE)
	- Address (DONE)
	- Value(s) (DONE)
- Constant value can be either single constant, array of constants or a string. (DONE)
- If datatype is array of UINT8, INT8, UINT16 or INT16 then:
	- Number of constants matches array length. (DONE)
	- All values are delimited by comma or by a white character. (DONE)
	- All values are in allowed range of specified datatype. (DONE)
	- Values can be bin, hex, dec or char. (DONE)
- Constrain: Array constants can be written only on single line. Splitting to multiple lines is not allowed. This rule is there to keep the Assembler as simple as possible.


==============================
Requirements for .TEXT section
==============================
- Source labels always match destination labels. (!!!)
;   	- Check: If data is an array (it contains square brackets) then there must be both (opening and closing) brackets.
;		- zacina s instrukciou
;		- dalej treba parsovat podla formatu instrukcie
; 		- Check: Index range in an array.
; 		- Check: Usage of uninitialized variable.
; 		- Check: ROM can`t be written.
; 		- Check: Section .TEXT contains only defined symbols (register, instruction, constants, labels).
;
; Memory manipulation and alignment:
; - INT16/UINT16
;   - Always aligned.
;   - Can be manipulated with LOAD/STORE/LOADI/STOREI.
;
; - INT8/UINT8:
;   - Variable name must contain also information about position of the variable in a memory word.
;   - Based on position correct LOADL/LOADU/STOREL/STOREU (+ new LOADIL/LOADIU/STOREIL/STOREIU) instruction 
;     will be automatically selected by assembler. Number of GP registers must be decreased to 8.

