label = ...
{
    'LABEL'
    'SUM'
};
% Create new variables from strings defined in the array "label".
for (idx = 1:size(label))
    eval([char(label(idx)),'  = bitor(c.LABEL_SRC_PREFIX,  idx);']);
    eval([char(label(idx)),'_ = bitor(c.LABEL_DEST_PREFIX, idx);']);
end
c.LBL_CNT = idx;


const = ...
{
    'VAR1'
    'VAR2'
    'VAR3'
    'VAR4'
    'VAR5'
    'VAR6'
    'VAR7'
    'VAR8'
    'VAR9'
    'VAR10'
};
% Create new (Matlab) variables from strings defined in the array "const".
for (idx = 1:size(const))
    % Set all (Matlab) variables to zero.
    eval([char(const(idx)),' = 0;']);
end

% First number in the constant data entry must be always a datatype (U16, U8, S8 or CHR).
% Second number in the constant data entry must be always a data identifier (name of the constant data).
ConstData = ...
[
%   U8  VAR1    h00                                 ... Will be stored as 0x0000
%   U8  VAR2    h01                                 ... Will be stored as 0x0001
%   U8  VAR3    hFE                                 ... Will be stored as 0x00FE
%   U8  VAR4    hFF                                 ... Will be stored as 0x00FF
%                                                   ...
%   U8  VAR5    0                                   ... Will be stored as 0x0000
%   U8  VAR6    1                                   ... Will be stored as 0x0001
%   U8  VAR7    254                                 ... Will be stored as 0x00FE
%   U8  VAR8    255                                 ... Will be stored as 0x00FF
%                                                   ...
% ...   U8  VAR9    -1                                  ... Compilation error
% ...   U8  VAR10   256                                 ... Compilation error
];
    % U8    VAR1    hF0                                 ... % Will be stored as 0x00F0
    % S8    VAR2    hF0                                 ... % Will be stored as 0x??F0
    % U16 VAR3  hF0                                 ... % Will be stored as 0x00F0
    % S16 VAR4  hF0                                 ... % Will be stored as 0xFFF0
    % CHR DB        h01 h02 h03 0                   ... % Will be stored as 0xDEAD 0xBEEF
    % CHR HELL  h66 h66 h66                         ... % Will be stored as 0x6666 0x6600


SourceCode = ...
[
                LOADI       r0          0           ...
                LOADI       r1          1           ...
                                                    ...
    LABEL_      JMP         LABEL                   ...
];


    %                                               ...
    %                                               ...
    %           MOVL        r0          5           ...
    %                                               ...
    %           CALL        SUM                     ...
    %                                               ...
    % SUM_      ADD         r1          r0          ...
    %           CMPI        r0          0           ...
    %           JPE         
    %           CALL        SUM                     ...
    %           RET                                 ...

                % MOVL      r2          c.RAM_START ...
                % MOVL      r0          h81         ...
                % MOVU      r0          h56         ...
                % STORE     m(r2)       r0          ...
                % LOADU     r1          m(r2)       ...
                % LOADL     r3          m(r2)       ...



    % LABEL_            MOVU        base                        msb(c.VRAM_START)           ... % Initialize upper byte of the base register with upper byte of the VRAM start address.
    %               MOVL        r0                          5                           ...
    %               STOREI      lsb(c.VIDEO_CTRL)           r0                          ...
    %               MOVL        r0                          4                           ...
    %               STOREI      lsb(c.VIDEO_CTRL)           r0                          ...
    %               JMP         LABEL                                                   ...
                    % MOVL      r0                          3                           ...
                    % MOVL      col                         0                           ...
                    % MOVL      row                         0                           ...
                    % STOREI        lsb(c.VIDEO_CTRL)           r0                          ...
                    % LOADI     r1                          lsb(c.VIDEO_CTRL)           ...
                    % MOVL      col                         1                           ...
                    % MOVL      row                         1                           ...
                    % LOADI     r2                          lsb(c.VIDEO_CTRL)           ...
                    % MOVL      col                                 15                          ...
                    % MOVL      row                                 23                          ...
                    % STOREI        lsb(c.VIDEO_CTRL)                   r0                          ...
                    % STOREI        lsb(c.VRAM_START + 16)              r0                          ...
                    % MOVL      r0                                  125                         ...
                    % STOREI        lsb(c.VRAM_START + 32 - 1)          r0                          ...
                    % LOADI     r1                                  lsb(c.VRAM_START + 16)      ...
                    % STOREI        lsb(c.VRAM_START + 16 + 2)          r1                          ...
                    % MOVU      r0                                  0                           ...
                    % STOREI        lsb(c.VRAM_START + c.VRAM_SIZE - 1) r0                          ...
    %               MOVL        r0          lsb(c.RAND_NUM_GEN) ...
    %               MOVU        r0          msb(c.RAND_NUM_GEN) ...
                    % ADD           r0          

