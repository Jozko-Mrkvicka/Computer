#############################################
# Znaky
#############################################
16x16x8[B] = 256x8[B] = 2048[B]
..X.............
..X.............
..XX............
................
................
................
Toto je 16 znako
................
................
................
................
................
................
.......X....XX..
......XX....XX..
XXXX..X.........


8x8x8[B] = 64x8[B] = 512[B]
........
Toto je.
osem....
znakov..
........
........
........
........


1x32x8[B] = 256[B]
Tu je 32 znakov.................


#############################################
# Pixely
#############################################
16x16[p] = 2[B]x16 = 32[B]
. . . . . . . . | . . . . . . . .
. . . . . . . . | . . . . . . . .
. . . . . . . . | . . . . . . . .
. . . . . . . . | . . . . . . . .
. . . . . . . . | . . . . . . . .
. . . . . X . . | . . . . . . . .
. . . . . X . . | . . . . . . . .
. . . . . X X . | . . . . . . . .
----------------+----------------
. . . . . . . . | . . . . . . . .
. . . . . . . . | . . . . . . . .
. . . . . . . . | . . . . . X . .
. . . . . . . . | . . . X X X X .
. . . . . . . . | . . . X X . . .
. . . . . . . . | X X X X X . . .
. . . . . . . X | X . . . . . . .
X X X X . . . X | X . . . . . . .


16x24[p] = 2[B]x24 = 48[B]
. . . . . . . . | . . . . . . . .
. . . . . . . . | . . . . . . . .
. . . . . . . . | . . . . . . . .
. . . . . . . . | . . . . . . . .
. . . . . . . . | . . . . . . . .
. . . . . . . . | . . . . . . . .
. . . . . . . . | . . . . . . . .
. . . . . . . . | . . . . . . . .
----------------+----------------
. . . . . . . . | . . . . . . . .
. . . . . . . . | . . . . . . . .
. . . . . . . . | . . . . . . . .
. . . . . . . . | . . . . . . . .
. . . . . . . . | . . . . . . . .
. . . . . X . . | . . . . . . . .
. . . . . X . . | . . . . . . . .
. . . . . X X . | . . . . . . . .
----------------+----------------
. . . . . . . . | . . . . . . . .
. . . . . . . . | . . . . . . . .
. . . . . . . . | . . . . . X . .
. . . . . . . . | . . . X X X X .
. . . . . . . . | . . . X X . . .
. . . . . . . . | X X X X X . . .
. . . . . . . X | X . . . . . . .
X X X X . . . X | X . . . . . . .


16x32[p] = 2[B]x32 = 64[B]
. . . . . . . . | . . . . . . . .
. . . . . . . . | . . . . . . . .
. . . . . . . . | . . . . . . . .
. . . . . . . . | . . . . . . . .
. . . . . . . . | . . . . . . . .
. . . . . . . . | . . . . . . . .
. . . . . . . . | . . . . . . . .
. . . . . . . . | . . . . . . . .
----------------+----------------
. . . . . . . . | . . . . . . . .
. . . . . . . . | . . . . . . . .
. . . . . . . . | . . . . . . . .
. . . . . . . . | . . . . . . . .
. . . . . . . . | . . . . . . . .
. . . . . . . . | . . . . . . . .
. . . . . . . . | . . . . . . . .
. . . . . . . . | . . . . . . . .
----------------+----------------
. . . . . . . . | . . . . . . . .
. . . . . . . . | . . . . . . . .
. . . . . . . . | . . . . . . . .
. . . . . . . . | . . . . . . . .
. . . . . . . . | . . . . . . . .
. . . . . . . . | . . . . . . . .
. . . . . . . . | . . . . . . . .
. . . . . . . . | . . . . . . . .
----------------+----------------
. . . . . . . . | . . . . . . . .
. . . . . . . . | . . . . . . . .
. . . . . . . . | . . . . . . . .
. . . . . . . . | . . . . . . . .
. . . . . . . . | . . . . . . . .
. . . . . . . . | . . . . . . . .
. . . . . . . . | . . . . . . . .
. . . . . . . . | . . . . . . . .


#############################################
# Co treba urobit
#############################################
- Computer:
	- Rozsirit ALU (nasobicka, delicka).
	- Na jeden z GP registrov namapovat hardwarovy generator nahodnych cisel.
	- Pridat vstupy (tlacitka/klavesnicu) + zamysliet sa nad interruptami.
	- Spojit graficku a textovu pamat s RAM pamatou.
	- Pamat nie je nijak chranena. Napriklad s instrukciou JMP by sa malo dat skocit doprostred zasobniku. Vymysliet ochranu + hard faulty.
	- Automaticky ukladat argument registre a0 .. a3 na zasobnik pri vykonani instrukcie CALL
	- Zatial este nemam ziaden return value register pomocou ktoreho by funkcia vracala navratovu hodnotu. Automaticky ukladat return value register.
	- Ako vykonat skok pri porovnani na nerovnost? Asi mi chybaju instrukcie Jump Greater Than, Jump Less Than.

Preprocessor:
	- 

- Clean-up:
	- Instructions.m - Pridat do definicie instrukcii informaciu o tom ci je immediate hodnota interpretovana ako singed alebo unsigned.
	- Pridat zbernicu (adresova, datova). Zlucit uz existujuce bloky aby pocitac pripominal von Neumannovu schemu.
	- Pridat do common kniznice bloky counter.
	- Fix all TODOs.
	- Spocitat pouzite bloky, zjednotit, zjednodusit.
	- Zbavit sa warningov.
	- Ucesat nazvy, zmenit typ pisma na Currier.
	- Pridat komentare.

- System testy
	- Pridat systemove testy - kazdu instrukciu otestovat samostatne.

- Unit testy
	-

- Firmware:
	- Tetris
	- Snake
	- Kalkulacku
	- Faktorial -> Budem musiet ukladat na zasobnik aj navratovu adresu (Return Address Register).
	- Funkciu ktora dostane argumenty adresa pola a dlzka pola, a vrati sucet prvkov v poli (vytvorit demonstracnu funkciu ktora by dostala parametre z hlavneho programu a vratila by hodnotu. Ide tu o to ze este stale uplne nechapem pracu s funkciami/parametrami). Pridat .data segment/.text segment -> Chyba mi mechanizmus na ukladanie datovych poli do zdrojoveho kodu. Ako nahardcodovat pole cisel do ROM, aby sa neinterpretovali ako instrukcie?? Myslim ze sa na to pouziva sekcia ".data". 

GIT:
	- Common library updated. Added block Decoder_5_to_32.
	- Preprocessor updated. Added support for hexadecimal numbers.
	- Opcode of the instruction format 3 extended from 4 to 5 bits.
	- The following instructions added:
		- SHIFT
		- AND
		- OR
		- XOR
		- NOT
